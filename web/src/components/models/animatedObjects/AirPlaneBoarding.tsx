/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/vehicles/AirPlaneBoarding.glb -o src/components/models/vehicles/AirPlaneBoarding.tsx -r public/ 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useUserContext } from '@/context/UserContext'
import { materials } from '@/consts/materials'

type GLTFResult = GLTF & {
    nodes: {
        Cube003: THREE.Mesh
        Cube003_1: THREE.Mesh
    }
    materials: {
        Base: THREE.MeshStandardMaterial
        Primary: THREE.MeshStandardMaterial
    }
    animations: GLTFAction[]
}

type ActionName = 'AirPlaneBoarding'
interface GLTFAction extends THREE.AnimationClip {
    name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function AirPlaneBoarding(props: JSX.IntrinsicElements['group']) {
    const group = useRef<THREE.Group>()
    const { nodes, animations } = useGLTF('/models/animatedObjects/AirPlaneBoarding.glb') as GLTFResult
    const { actions } = useAnimations(animations, group)

    const { quality } = useUserContext()

    useEffect(() => {
        actions['AirPlaneBoarding'].play()
        return () => {
            actions['AirPlaneBoarding'].stop()
        }
    }, []);
    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Scene">
                <group name="airplane" position={[-36.049, 0.76, -55.176]} rotation={[0, Math.PI / 2, 0]}>
                    <mesh name="Cube003" geometry={nodes.Cube003.geometry} material={materials.Base} castShadow />
                    <mesh name="Cube003_1" geometry={nodes.Cube003_1.geometry} material={materials.Primary} castShadow />
                </group>
            </group>
        </group>
    )
}

useGLTF.preload('/models/animatedObjects/AirPlaneBoarding.glb')

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/animatedObjects/TruckContainer.glb -o src/components/models/animatedObjects/TruckContainer.tsx -k -s -r public/ 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { materials } from '@/consts/materials'
import { useUserContext } from '@/context/UserContext'

type GLTFResult = GLTF & {
  nodes: {
    mesh980636007006: THREE.Mesh
    mesh980636007006_1: THREE.Mesh
    mesh980636007006_2: THREE.Mesh
    Container: THREE.Mesh
  }
  materials: {
    ['Base.001']: THREE.MeshStandardMaterial
    Glass: THREE.MeshPhysicalMaterial
    WindowNight: THREE.MeshStandardMaterial
    Container: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'Action.002' | 'Action.002' | 'Action.003'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function TruckContainer(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, animations } = useGLTF('/models/animatedObjects/TruckContainer.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)

  useEffect(() => {
    actions['Action.002']?.play()
    actions['Action.002']?.play()
    actions['Action.003']?.play()
    return () => {
      actions['Action.002']?.stop()
      actions['Action.002']?.stop()
      actions['Action.003']?.stop()
    }
  }, []);

  const { isNight } = useUserContext()

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="TruckContainerTravel">
        <group name="Truck001_1" position={[2, 0.594, -44.588]} scale={0.793}>
          <mesh name="mesh980636007006" castShadow geometry={nodes.mesh980636007006.geometry} material={materials.Base} />
          <mesh name="mesh980636007006_1" castShadow geometry={nodes.mesh980636007006_1.geometry} material={materials.Glass} />
          <mesh name="mesh980636007006_2" castShadow geometry={nodes.mesh980636007006_2.geometry} material={isNight ? materials.GlassNight : materials.Glass} />
        </group>
        <mesh name="Container" castShadow geometry={nodes.Container.geometry} material={materials.Primary} position={[2, 0.594, -44.588]} scale={0.793} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/animatedObjects/TruckContainer.glb')

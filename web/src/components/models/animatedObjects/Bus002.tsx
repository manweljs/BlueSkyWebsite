/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/animatedObjects/Bus002.glb -o src/components/models/animatedObjects/Bus002.tsx -k -s -r public/ 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { materials } from '@/consts/materials'

type GLTFResult = GLTF & {
  nodes: {
    Plane003: THREE.Mesh
    Plane003_1: THREE.Mesh
    Plane003_2: THREE.Mesh
  }
  materials: {
    Glass: THREE.MeshPhysicalMaterial
    Base: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'Action.001'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Bus002(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, animations } = useGLTF('/models/animatedObjects/Bus002.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    actions['Action.001']?.play()
    return () => {
      actions['Action.001']?.stop()
    }
  }, []);
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="BusTravel002">
        <group name="Bus002" position={[-15.225, 0.856, 53.673]} rotation={[0, -1.565, 0]}>
          <mesh name="Plane003" castShadow geometry={nodes.Plane003.geometry} material={materials.Glass} />
          <mesh name="Plane003_1" castShadow geometry={nodes.Plane003_1.geometry} material={materials.Base} />
          <mesh name="Plane003_2" castShadow geometry={nodes.Plane003_2.geometry} material={materials.GlassNight} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/animatedObjects/Bus002.glb')

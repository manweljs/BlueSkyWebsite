/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/vehicles/Train.glb -o src/components/models/vehicles/Train.tsx -r public/ 
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame, useThree } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Plane259: THREE.Mesh
    Plane259_1: THREE.Mesh
    ClipEnter: THREE.Mesh
    ClipExit: THREE.Mesh
    Plane135: THREE.Mesh
    Plane135_1: THREE.Mesh
    Plane254: THREE.Mesh
    Plane254_1: THREE.Mesh
  }
  materials: {
    Base: THREE.MeshStandardMaterial
    Glass: THREE.MeshPhysicalMaterial
    Primary: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'Train' | 'CubeAction' | 'CubeAction.001' | 'GateAction' | 'GateAction.001'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Train(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/models/vehicles/Train.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  const { scene, gl } = useThree()

  const clipEnterA = useRef(null);
  const clipEnterB = useRef(null);

  const clipExitA = useRef(null);
  const clipExitB = useRef(null);


  const clipPlanes = [
    new THREE.Plane(new THREE.Vector3(0, 0, -1), 68.041), // Plane untuk ClipEnter 
    new THREE.Plane(new THREE.Vector3(0, 0, 1), 75),// Plane untuk ClipExit

  ];

  useEffect(() => {
    actions['Train'].play();

    // Setiap material pada objek kereta harus memiliki clipping planes.
    Object.values(materials).forEach(material => {
      material.clippingPlanes = clipPlanes;
      material.clipIntersection = false; // Anda bisa mengatur ini menjadi false, tergantung pada efek yang diinginkan.
      material.needsUpdate = true;
    });

    // Jika Anda ingin menambahkan PlaneHelper
    // clipEnterA.current = new THREE.PlaneHelper(clipPlanes[0], 100, 0xff0000); //red
    // clipEnterB.current = new THREE.PlaneHelper(clipPlanes[1], 100, 0x0000ff); //blue

    // group.current.add(clipEnterA.current);
    // group.current.add(clipEnterB.current);


    gl.localClippingEnabled = true;

    // Bersihkan efek saat komponen unmount
    return () => {
      Object.values(materials).forEach(material => {
        material.clippingPlanes = null;
        material.clipIntersection = true;
        material.needsUpdate = true;
      });
      group.current.remove(clipEnterA.current);
      group.current.remove(clipEnterB.current);

    }
  }, [actions, materials, clipPlanes]);



  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Train006" position={[26.793, 0.529, -86.874]} rotation={[-0.001, 0, -0.014]} scale={0.596}>
          <mesh name="Plane259" geometry={nodes.Plane259.geometry} material={materials.Base} />
          <mesh name="Plane259_1" geometry={nodes.Plane259_1.geometry} material={materials.Glass} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/vehicles/Train.glb')

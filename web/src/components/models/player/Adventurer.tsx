/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/player/Adventurer.glb -o src/components/models/player/Adventurer.tsx -k -s -r public/ 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations, ContactShadows, useKeyboardControls } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { RigidBody } from '@react-three/rapier'
import { Controls } from '@/consts'
import { useFrame } from '@react-three/fiber'
import { useUserContext } from '@/hooks/UserContext'

type GLTFResult = GLTF & {
  nodes: {
    Adventurer_Feet_1: THREE.SkinnedMesh
    Adventurer_Feet_2: THREE.SkinnedMesh
    Adventurer_Legs_1: THREE.SkinnedMesh
    Adventurer_Legs_2: THREE.SkinnedMesh
    Adventurer_Body_1: THREE.SkinnedMesh
    Adventurer_Body_2: THREE.SkinnedMesh
    Adventurer_Body_3: THREE.SkinnedMesh
    Adventurer_Head_1: THREE.SkinnedMesh
    Adventurer_Head_2: THREE.SkinnedMesh
    Adventurer_Head_3: THREE.SkinnedMesh
    Adventurer_Head_4: THREE.SkinnedMesh
    Backpack_1: THREE.SkinnedMesh
    Backpack_2: THREE.SkinnedMesh
    Backpack_3: THREE.SkinnedMesh
    Backpack_4: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: {
    Black: THREE.MeshStandardMaterial
    Grey: THREE.MeshStandardMaterial
    Brown2: THREE.MeshStandardMaterial
    Brown: THREE.MeshStandardMaterial
    Green: THREE.MeshStandardMaterial
    LightGreen: THREE.MeshStandardMaterial
    Skin: THREE.MeshStandardMaterial
    Eyebrows: THREE.MeshStandardMaterial
    Eye: THREE.MeshStandardMaterial
    Hair: THREE.MeshStandardMaterial
    Gold: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = 'CharacterArmature|Death' | 'CharacterArmature|Gun_Shoot' | 'CharacterArmature|HitRecieve' | 'CharacterArmature|HitRecieve_2' | 'CharacterArmature|Idle' | 'CharacterArmature|Idle_Gun' | 'CharacterArmature|Idle_Gun_Pointing' | 'CharacterArmature|Idle_Gun_Shoot' | 'CharacterArmature|Idle_Neutral' | 'CharacterArmature|Idle_Sword' | 'CharacterArmature|Interact' | 'CharacterArmature|Kick_Left' | 'CharacterArmature|Kick_Right' | 'CharacterArmature|Punch_Left' | 'CharacterArmature|Punch_Right' | 'CharacterArmature|Roll' | 'CharacterArmature|Run' | 'CharacterArmature|Run_Back' | 'CharacterArmature|Run_Left' | 'CharacterArmature|Run_Right' | 'CharacterArmature|Run_Shoot' | 'CharacterArmature|Sword_Slash' | 'CharacterArmature|Walk' | 'CharacterArmature|Wave'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}
type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['skinnedMesh'] | JSX.IntrinsicElements['bone']>>

export function Adventurer(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/models/player/Adventurer.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)
  const { cameraControlsRef } = useUserContext()
  const [sub, get] = useKeyboardControls<Controls>()

  const characterRef = useRef(null)

  function handleKeyPress(key, isPressed) {
    console.log(`${key} is ${isPressed ? 'pressed' : 'released'}`);
    if (isPressed) {
      switch (key) {
        case 'forward':
          actions['CharacterArmature|Run'].play();
          break;
        case 'backward':
          actions['CharacterArmature|Run_Back'].play();
          break;
        case 'left':
          actions['CharacterArmature|Run_Left'].play();
          break;
        case 'right':
          actions['CharacterArmature|Run_Right'].play();
          break;
        case 'jump':
          actions['CharacterArmature|Run'].play();
          break;
      }
    } else {
      switch (key) {
        case 'forward':
          actions['CharacterArmature|Run'].stop();
          break;
        case 'backward':
          actions['CharacterArmature|Run_Back'].stop();
          break;
        case 'left':
          actions['CharacterArmature|Run_Left'].stop();
          break;
        case 'right':
          actions['CharacterArmature|Run_Right'].stop();
          break;
        case 'jump':
          actions['CharacterArmature|Run'].stop();
          break;
      }
    }
  }

  useEffect(() => {
    const unsubscribeHandlers = [
      sub((state) => state.forward, (pressed) => handleKeyPress('forward', pressed)),
      sub((state) => state.backward, (pressed) => handleKeyPress('backward', pressed)),
      sub((state) => state.left, (pressed) => handleKeyPress('left', pressed)),
      sub((state) => state.right, (pressed) => handleKeyPress('right', pressed)),
      sub((state) => state.jump, (pressed) => handleKeyPress('jump', pressed))
    ];

    // Cleanup function to unsubscribe
    return () => {
      unsubscribeHandlers.forEach(unsubscribe => unsubscribe());
    };
  }, [sub]);

  const moveDirection = new THREE.Vector3();
  const speed = 5;
  const cameraOffset = new THREE.Vector3(0, -10, 5);
  const lerpFactor = 0.4; // Faktor interpolasi untuk pergerakan kamera

  useFrame((state, delta) => {
    const { forward, backward, left, right } = get(); // Mengasumsikan fungsi get() mengembalikan status tombol

    // Atur vektor berdasarkan input
    moveDirection.set(0, 0, 0);
    if (forward) moveDirection.y -= 1;
    if (backward) moveDirection.y += 1;
    if (left) moveDirection.x += 1;
    if (right) moveDirection.x -= 1;

    // Normalisasi untuk menghindari pergerakan lebih cepat secara diagonal
    moveDirection.normalize();

    // Terapkan kecepatan dan arah
    moveDirection.multiplyScalar(speed * delta);

    characterRef.current.position.add(moveDirection);

    if (characterRef.current && state.camera) {
      // Hitung posisi target kamera dengan menjaga kamera selalu berada di belakang karakter
      const targetPosition = characterRef.current.position.clone().add(cameraOffset);

      // Hitung posisi interpolasi untuk kamera
      const interpolatedPosition = new THREE.Vector3().lerpVectors(state.camera.position, targetPosition, lerpFactor);

      // Update posisi dan arah pandang kamera
      cameraControlsRef.current.setLookAt(
        interpolatedPosition.x, interpolatedPosition.z + -1, -interpolatedPosition.y + 1,
        characterRef.current.position.x, characterRef.current.position.z, -characterRef.current.position.y,
        true
      );
    }
  });

  return (
    <group ref={group} {...props}
      dispose={null}
      position={[4, 1, 1]}
      rotation={[-Math.PI / 2, 0, 0]}
      scale={0.5}
    >
      <group name="Root_Scene" ref={characterRef}  >
        <group name="RootNode">
          <RigidBody colliders={"cuboid"} scale={1.3}>
            <group name="CharacterArmature" rotation={[0, 0, 0]} scale={100}>
              <primitive object={nodes.Root} />
            </group>
            <group name="Adventurer_Feet" rotation={[0, 0, 0]} scale={100}>
              <skinnedMesh castShadow name="Adventurer_Feet_1" geometry={nodes.Adventurer_Feet_1.geometry} material={materials.Black} skeleton={nodes.Adventurer_Feet_1.skeleton} />
              <skinnedMesh castShadow name="Adventurer_Feet_2" geometry={nodes.Adventurer_Feet_2.geometry} material={materials.Grey} skeleton={nodes.Adventurer_Feet_2.skeleton} />
            </group>
            <group name="Adventurer_Legs" rotation={[0, 0, 0]} scale={100}>
              <skinnedMesh castShadow name="Adventurer_Legs_1" geometry={nodes.Adventurer_Legs_1.geometry} material={materials.Brown2} skeleton={nodes.Adventurer_Legs_1.skeleton} />
              <skinnedMesh castShadow name="Adventurer_Legs_2" geometry={nodes.Adventurer_Legs_2.geometry} material={materials.Brown} skeleton={nodes.Adventurer_Legs_2.skeleton} />
            </group>
            <group name="Adventurer_Body" rotation={[0, 0, 0]} scale={100}>
              <skinnedMesh castShadow name="Adventurer_Body_1" geometry={nodes.Adventurer_Body_1.geometry} material={materials.Green} skeleton={nodes.Adventurer_Body_1.skeleton} />
              <skinnedMesh castShadow name="Adventurer_Body_2" geometry={nodes.Adventurer_Body_2.geometry} material={materials.LightGreen} skeleton={nodes.Adventurer_Body_2.skeleton} />
              <skinnedMesh castShadow name="Adventurer_Body_3" geometry={nodes.Adventurer_Body_3.geometry} material={materials.Skin} skeleton={nodes.Adventurer_Body_3.skeleton} />
            </group>
            <group name="Adventurer_Head" rotation={[0, 0, 0]} scale={100}>
              <skinnedMesh name="Adventurer_Head_1" geometry={nodes.Adventurer_Head_1.geometry} material={materials.Skin} skeleton={nodes.Adventurer_Head_1.skeleton} />
              <skinnedMesh name="Adventurer_Head_2" geometry={nodes.Adventurer_Head_2.geometry} material={materials.Eyebrows} skeleton={nodes.Adventurer_Head_2.skeleton} />
              <skinnedMesh name="Adventurer_Head_3" geometry={nodes.Adventurer_Head_3.geometry} material={materials.Eye} skeleton={nodes.Adventurer_Head_3.skeleton} />
              <skinnedMesh name="Adventurer_Head_4" geometry={nodes.Adventurer_Head_4.geometry} material={materials.Hair} skeleton={nodes.Adventurer_Head_4.skeleton} />
            </group>
          </RigidBody>
          <group name="Backpack" position={[0, 1.373, -0.117]} rotation={[-Math.PI / 2, 0, Math.PI]} scale={26.077}>
            <skinnedMesh name="Backpack_1" geometry={nodes.Backpack_1.geometry} material={materials.Brown} skeleton={nodes.Backpack_1.skeleton} />
            <skinnedMesh name="Backpack_2" geometry={nodes.Backpack_2.geometry} material={materials.Green} skeleton={nodes.Backpack_2.skeleton} />
            <skinnedMesh name="Backpack_3" geometry={nodes.Backpack_3.geometry} material={materials.LightGreen} skeleton={nodes.Backpack_3.skeleton} />
            <skinnedMesh name="Backpack_4" geometry={nodes.Backpack_4.geometry} material={materials.Gold} skeleton={nodes.Backpack_4.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/player/Adventurer.glb')
